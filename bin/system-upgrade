#!/usr/bin/env bash

is_sudo() {
    local user; user=$(whoami)
    local group="sudo"
    if id -nG "${user}" | grep -qw "${group}"; then
      return 0
    else
      return 1
    fi
}

brew_package_version() {
  local package
  local brew_prefix
  local version

  package="$1"
  brew_prefix="^$(brew --prefix)/Cellar"
  version=$(brew info "${package}" | grep "${brew_prefix}" | awk -F "${brew_prefix}/" '{print $2}' | awk -F '/| ' '{print $2}')
  # "return" a string value
  echo "${version}"
}

is_head() {
  local version
  version=$(brew_package_version "$1")
  [[ "${version}" =~ ^HEAD ]] && return 0 || return 1
}

update_repositories() {
    # https://stackoverflow.com/questions/24628076/bash-convert-n-delimited-strings-into-array
    # https://unix.stackexchange.com/questions/92187/setting-ifs-for-a-single-statement

    # https://unix.stackexchange.com/questions/12902/how-to-run-find-exec
    # https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash

    local GIT_REPOSITORIES
    IFS=$'\n' \
    GIT_REPOSITORIES=$(find . -type d -iname '*.git' -exec bash -c 'path_with_ext="{}"; path=${path_with_ext%/.*} && echo ${path}' \; | grep -v "./local\|^.$" | sort)

    local CURDIR; CURDIR=$(pwd)
    local TIMEOUT=10s
    for REPOSITORY in "${GIT_REPOSITORIES[@]}"
    do
      cd "${REPOSITORY}" && (
      timeout --kill-after ${TIMEOUT} --signal=HUP ${TIMEOUT} git fetch --all && \
      timeout --kill-after ${TIMEOUT} --signal=HUP ${TIMEOUT} git pull && \
      timeout --kill-after ${TIMEOUT} --signal=HUP ${TIMEOUT} git submodule foreach 'git pull || :' >/dev/null 2>&1
      )
      cd "${CURDIR}"
    done
}

cd ~/.dotfiles && update_repositories
cd ~/.tmux/plugins && update_repositories

# # zim update
# zsh ${ZIM_HOME}/tools/zim_update
# source ${ZIM_HOME}/tools/zim_clean_cache

# # docker-compose
# LATEST_URL=`curl -Ls -o /dev/null -w %{url_effective} https://github.com/docker/compose/releases/latest`
# COMPOSE_VERSION=${LATEST_URL##*/}
# CURRENT_VERSION=`/usr/local/bin/docker-compose --version 2>/dev/null | awk -F " |," '{print $3}'`
# if [ "${CURRENT_VERSION}" != "${COMPOSE_VERSION}" ]; then
#     if is_sudo; then
#         DOWNLOAD_URL=https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m`
#         sudo curl -L ${DOWNLOAD_URL} -o /usr/local/bin/docker-compose
#         sudo chmod +x /usr/local/bin/docker-compose
#     else
#         echo "Docker-compose should be updated from ${CURRENT_VERSION} to the ${COMPOSE_VERSION}, but user aren't in sudo group."
#     fi
# else
#     echo "Docker-compose version is up to date"
# fi

case $OSTYPE in
linux*)
  if is_sudo; then
    sudo bash -c 'apt-get update && apt-get -yqq upgrade && apt-get -yqq autoremove && apt-get clean all'
    sudo chgrp -R brew /home/linuxbrew
    sudo chmod -R g+w  /home/linuxbrew
    sudo chgrp -R brew "$(brew --prefix)/"
    sudo chmod -R g+w  "$(brew --prefix)/"
    sudo chmod -R u+w  "$(brew --prefix)/"
  fi
  ;;
esac

# brew
brew update
brew upgrade

PACKAGES=( \
  mosh \
  tmux \
  neovim \
)
for PACKAGE in "${PACKAGES[@]}"; do
  is_head "${PACKAGE}" && brew reinstall "${PACKAGE}"
done

brew cleanup --prune all --verbose

# ~/.dotfiles/bin/reinstall-nvim
