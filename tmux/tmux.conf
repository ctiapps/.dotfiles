set -g default-shell $SHELL

# if run as "tmux attach", create a session if one does not already exist
new-session -n $HOST

# VIM detection
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# start windows numbering at 1
set -g base-index 1

# make pane numbering consistent with windows
setw -g pane-base-index 1

# Dynamically update iTerm tab and window titles
set -g set-titles on

# rename window to reflect current program
setw -g automatic-rename on

# renumber windows when a window is closed
set -g renumber-windows on

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# Bigger history
set -g history-limit 25000

set -q -g status-utf8 on
setw -q -g utf8 on

setw -g xterm-keys on
set -s focus-events on

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi
# set -g status-keys emacs

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Fix key bindings broken in tmux 2.1
set -g assume-paste-time 0

# No escape time for vi mode (don't wait after prefix)
set -sg escape-time 0

# Ring the bell if any background window rang a bell
set -g bell-action any

# Activity Monitoring
# If you have many tmux windows opened, you might want to get notified when something happens inside other windows.
setw -g monitor-activity on
set -g visual-activity on

# Keep your finger on ctrl, or don't
bind ^D detach-client

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Option left/right to switch window
# bind -n  M-Left previous-window
# bind -n M-Right next-window
bind -n  M-Left if-shell "$is_vim" "send-keys Escape :tabp Enter" "previous-window"
bind -n M-Right if-shell "$is_vim" "send-keys Escape :tabn Enter" "next-window"

# Option-Shift left/right to switch window in vim and tmux
bind -n  M-S-Left if-shell "$is_vim" "send-keys Escape :tabp Enter" "previous-window"
bind -n M-S-Right if-shell "$is_vim" "send-keys Escape :tabn Enter" "next-window"

# Control-Shift left/right to move window
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1

# prefix - Option left/right to move window
bind M-Left swap-window -t -1
bind M-Right swap-window -t +1

# Ctrl-Option left and right to switch sessions (don't work on mac with spaces)
# bind -n  C-left switch-client -p
# bind -n  C-right switch-client -n

# https://stackoverflow.com/questions/18600188/home-end-keys-do-not-work-in-tmux
bind -n Home if-shell "$is_vim" "send-keys Escape 'OH'" "send-key C-a"
bind -n End  if-shell "$is_vim" "send-keys Escape 'OF'" "send-key C-e"

# Quick switch to the window 0
bind 0 switch-client -t 0

# Create splits and vertical splits
bind -  split-window -v -p 50 -c "#{pane_current_path}"
bind |  split-window -h -p 50 -c "#{pane_current_path}"

# Pane resize using Option(Alt) - arrow key
unbind    C-Up
unbind  C-Down
unbind  C-Left
unbind C-Right
bind -r    C-Up resize-pane -U
bind -r  C-Down resize-pane -D
bind -r  C-Left resize-pane -L
bind -r C-Right resize-pane -R

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Shift-arrow keys to switch panes
# Smart pane switching with awareness of vim splits.
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# Shift-arrow keys to switch panes
unbind    S-Up
unbind  S-Down
unbind  S-Left
unbind S-Right
bind -n S-Up    if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n S-Down  if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n S-Left  if-shell "$is_vim" "send-keys C-h ""select-pane -L"
bind -n S-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"

unbind k
bind k confirm-before kill-pane

unbind K
bind K confirm-before kill-window

unbind q
bind q confirm-before kill-session

unbind Q
bind Q confirm-before kill-server

# update environment variables on reconnect
set -g update-environment "DISPLAY WINDOWID SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION"

# Aggresive resizing fixes the issue where a computer with a smaller screen resizes tmux (filling it with dots).
# Incompatible with iTerm tmux integration (tmux; tmux -CC attach)
# check also https://github.com/tmux-plugins/tmux-sensible/issues/24#issuecomment-251045335
setw -g aggressive-resize on

# resize tmux window according to the current terminal size (through re-attach)
bind ^ attach-session -d
unbind r
bind r attach-session -d \; refresh-client

# force a reload of the config file
unbind R
bind R source-file ~/.tmux.conf \; display "Reloaded!"

# Screen like binding for last window
unbind l
bind C-a last-window

# Screen like binding with Ctrl-A
unbind C-b
set -g prefix C-a
bind a send-prefix

# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "xterm-256color"

# Tc enables true color
# set -ag terminal-overrides ",*256col*:colors=256:Tc"
set -ga terminal-overrides ",xterm-256color:Tc"

# Ms modifies OSC 52 clipboard handling to work with mosh, see
# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
set -ag terminal-overrides "vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"
# set-option -ag terminal-overrides ",xterm-256color:Ms=\\E]52;c;%p2%s\\7"

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

set -g mouse on

# Load OS specific configurations (for mac and Linux, basically clipboard related)
if-shell "uname | grep -q Darwin" "source ~/.tmux/macos.conf" "source-file ~/.tmux/linux.conf"

# Status update interval
set -g status-interval 2

# Statusline colors
if-shell "[ -f ~/.tmux/statusline.conf ]" "source ~/.tmux/statusline.conf"

# Local config
if-shell "[ -f ~/.tmux/user.conf ]" "source ~/.tmux/user.conf"

# Tmux plugins and confiuguration
set -g @resurrect-dir "~/.tmux/data/resurrect"
set -g @resurrect-save "C-s"
set -g @resurrect-restore "C-r"
set -g @resurrect-capture-pane-contents "on"
set -g @resurrect-save-shell-history "off"
set -g @resurrect-strategy-vim "session"
set -g @resurrect-strategy-nvim "session"
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_programs.md
set -g @resurrect-processes "vim nvim man less more tail top htop irssi weechat mutt ssh mosh-client"
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_shell_history.md

set -g @continuum-boot "off"
set -g @continuum-boot-options "iterm,fullscreen"
set -g @continuum-restore "on"

set -g @urlview-key "u"

# plugin management
set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins'
set -g @tpm_plugins '         \
  tmux-plugins/tpm            \
  tmux-plugins/tmux-resurrect \
'
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin "tmux-plugins/tmux-resurrect"
# set -g @plugin "tmux-continuum/continuum"
# set -g @plugin "tmux-plugins/tmux-yank"
# set -g @plugin "tmux-plugins/tmux-sensible"
# set -g @plugin "tmux-plugins/tmux-urlview"
# set -g @plugin "thewtex/tmux-mem-cpu-load"

if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'mkdir -p ~/.tmux/plugins && git clone --depth 1 https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

if "test -f ~/.tmux/plugins/tpm/tpm" \
  "run -b ~/.tmux/plugins/tpm/tpm"

# Automatically restore tmux sessions (use only single plugin: resurrect or continuum)
if "test -f ~/.tmux/plugins/tmux-resurrect/scripts/restore.sh" \
  "run -b ~/.tmux/plugins/tmux-resurrect/scripts/restore.sh"
# if "test -f ~/.tmux/plugins/tmux-continuum/scripts/continuum_restore.sh" \
#   "run -b ~/.tmux/plugins/tmux-continuum/scripts/continuum_restore.sh"

# # Disable aggressive-resize to get tmux and iTerm2 integration working
# setw -g aggressive-resize off
